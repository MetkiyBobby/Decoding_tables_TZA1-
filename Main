#! python3
# Программа для перевода данных таблиц ТЗА-1 в удобный для работы вид

import re # импорт модуля для работы с регулярными выражениями
import os # импорт модуля для работы с файлами и путями

def fileExistenceCheck(file):
    '''Функция проверяет существование файла с исходными данными'''
    filePath = os.path.join(os.getcwd(), file)
    if os.path.exists(filePath):
        return filePath
    else:
        print('Файл не найден. Проверьте присутствуют ли в папке' +
                  ' с программой файл' + file +
              '\n(Возможно он удален или переименован)')
        print('Для продолжения нажмите клавишу \'ENTER\'')
        pause = input()

def fileReading(filePath):
    '''Функция извлекает из файла filePath исходные данные и возвращает их
    в виде текста'''
    file = open(filePath)
    fileForRegex = file.readlines()
    data = str(fileForRegex)
    file.close()

    return data

##def decodingWithBytes(file):
##    ''' Функция принимает текстовый файл и меняет в нем кодировку с cp866
##    на cp1251 путем перевода в байтовый вид'''
##    # TODO: РАЗОБРАТЬСЯ С МЕХАНИЗМОМ КОДИРОВКИ 
##    # Текст переводится в байтовый формат с нужной кодировкой
##    txtBytes = bytes(file, "cp1251")
##    # Байтовый файл переводится в текст с нужной кодировкой
##    decodedTxt = str(txtBytes, "cp866") 
##    
##    return decodedTxt


def decoding(file):
    ''' Функция принимает текстовый файл и меняет в нем кодировку с cp866
    на cp1251 '''
    # TODO: РАЗОБРАТЬСЯ С МЕХАНИЗМОМ КОДИРОВКИ 
    # Текст переводится в байтовый формат с нужной кодировкой
    decodedTxt = file.encode('cp1251').decode('cp866')
    
    return decodedTxt


def postNumberFind(data):
    #Функция принимает исходный текст и возвращает номер поста наблюдения
    postNumberRegex = re.compile(r'Пост\s*(\d)')
    mo = postNumberRegex.search(data)
    postNumber = mo.group(1)

    return postNumber

def yearFind(data):
    #Функция принимает исходный текст и возвращает год наблюдения
    yearRegex = re.compile(r'год\s*(\d\d\d\d)')
    mo = yearRegex.search(data)
    year = mo.group(1)

    return year

def monthFind(data):
    #Функция принимает исходный текст и возвращает месяц наблюдения
    monthRegex = re.compile(r'месяц\s*(\d+)')
    mo = monthRegex.search(data)
    month = mo.group(1)

    return month

def observationaldataFind(data):
    #TODO: Сделать автоматическое определение количества веществ и,
    # сооответственно, самоподстраивающееся регулярное выражение
    '''Функция принимает исходный текст и список дат, сроков, метеоданных
    концентраций веществ найденных регулярным выражением'''
    observationaldataRegex = re.compile(r'''
    (│|¦)           # разделитель
    (\s?\d+)        # дата
    (│|¦)           # разделитель
    (\s?\d+)        # срок
    (│|¦)           # разделитель
    (\s*-*\+*\s*\d*\s*\.*\d*)# температура, оС
    (│|¦)           # разделитель
    (\s?\d*\s?)     # направление ветра гр*10
    (│|¦)           # разделитель
    (\s?\d*\s?)     # скорость ветра м/с
    (│|¦)           # разделитель
    (\d*)           # атм. явления
    (│|¦)           # разделитель
    (\s*\d*)        # относительная влажность, %
    (│|¦)           # разделитель
    (\s*\d*)        # упругость водяного пара, гПа
    (│|¦)           # разделитель
    (\s*\d*)        # взвешенные веществ *10^-1
    (│|¦)           # разделитель
    (\s*\d*)        # диоксид серы SO2 *10^-3
    (│|¦)           # разделитель
    (\s*\d*)        # оксид углерода CO *10^0
    (│|¦)           # разделитель
    (\s*\d*)        # диоксид азота NO2 *10^-2
    (│|¦)           # разделитель
    (\s*\d*)        # оксид азота NO *10^-3 
    (│|¦)?          # разделитель
    (\s*\d*)?       # формальдегид CH2O *10^-3
    ''',re.X)
    observationaldata = observationaldataRegex.findall(data)    

    return observationaldata
    
def dataByObservation(data, year, month, post):
    '''Функция принимает список с наблюдениями по срокам, год, месяц
    и номер поста наблюдения и возвращает отформатированный текст со
    значениями разделенными точкой с запятой'''
    fulltxt = ''
    for i in data:
        # создается список содержащий необходимые части объектов совпадения
        # регулярных выражений
        txtlist = [post, year, month, i[1], i[3], i[5], i[7], i[9], i[11],
                   i[13], i[15], i[17], i[19], i[21], i[23], i[25], i[27]]
        txt = ''
        for j in txtlist:
            # создается строка с данными по каждому строку
            txt = txt + str(j)+';'
        fulltxt = fulltxt + txt + '\n'
        #строки объединяются в один большой текст

    return fulltxt
        
##def writeFile(data, post, year, month):
def writeFile(data):
    '''Функция создает файл и записывает в него преобразованные данные'''
##    fileName = year + ' ' + month + ' P' + post + '.txt'
    fileName = 'result.txt'
    tzaResult = open(fileName, 'a')    
    tzaResult.write(data)
    tzaResult.close()


def converting():
    '''Функция производит все необходимые действия если существует filePath'''
    if filePath:
        initialData = fileReading(filePath)
        decodedData = decoding(initialData)
        post = (postNumberFind(decodedData))
        year = (yearFind(decodedData))
        month = (monthFind(decodedData))        
        foundData = observationaldataFind(decodedData)
        print(foundData)
        outputData = dataByObservation(foundData, year, month, post)
##      writeFile(outputData, post, year, month)
        writeFile(outputData)
        print('Post: ' + post + ' Year: ' + year + ' Month:' + month)

print('Обработанные данные:')

fileList = os.listdir(os.getcwd())
print(fileList)
for i in range(2, len(fileList)-1): 
    filePath = fileExistenceCheck(fileList[i])
    converting()

print('Для выхода нажмите клавишу \'ENTER\'')
pause = input()  
